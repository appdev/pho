// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImgSyncerClient is the client API for ImgSyncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImgSyncerClient interface {
	ListByDate(ctx context.Context, in *ListByDateRequest, opts ...grpc.CallOption) (*ListByDateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	FilterNotUploaded(ctx context.Context, opts ...grpc.CallOption) (ImgSyncer_FilterNotUploadedClient, error)
	// SAMBA Drive
	SetDriveSMB(ctx context.Context, in *SetDriveSMBRequest, opts ...grpc.CallOption) (*SetDriveSMBResponse, error)
	ListDriveSMBShares(ctx context.Context, in *ListDriveSMBSharesRequest, opts ...grpc.CallOption) (*ListDriveSMBSharesResponse, error)
	ListDriveSMBDir(ctx context.Context, in *ListDriveSMBDirRequest, opts ...grpc.CallOption) (*ListDriveSMBDirResponse, error)
	SetDriveSMBShare(ctx context.Context, in *SetDriveSMBShareRequest, opts ...grpc.CallOption) (*SetDriveSMBShareResponse, error)
	// Webdav Drive
	SetDriveWebdav(ctx context.Context, in *SetDriveWebdavRequest, opts ...grpc.CallOption) (*SetDriveWebdavResponse, error)
	ListDriveWebdavDir(ctx context.Context, in *ListDriveWebdavDirRequest, opts ...grpc.CallOption) (*ListDriveWebdavDirResponse, error)
	// NFS Drive
	SetDriveNFS(ctx context.Context, in *SetDriveNFSRequest, opts ...grpc.CallOption) (*SetDriveNFSResponse, error)
	ListDriveNFSDir(ctx context.Context, in *ListDriveNFSDirRequest, opts ...grpc.CallOption) (*ListDriveNFSDirResponse, error)
	SetDriveBaiduNetDisk(ctx context.Context, in *SetDriveBaiduNetDiskRequest, opts ...grpc.CallOption) (*SetDriveBaiduNetDiskResponse, error)
	StartBaiduNetdiskLogin(ctx context.Context, in *StartBaiduNetdiskLoginRequest, opts ...grpc.CallOption) (*StartBaiduNetdiskLoginResponse, error)
}

type imgSyncerClient struct {
	cc grpc.ClientConnInterface
}

func NewImgSyncerClient(cc grpc.ClientConnInterface) ImgSyncerClient {
	return &imgSyncerClient{cc}
}

func (c *imgSyncerClient) ListByDate(ctx context.Context, in *ListByDateRequest, opts ...grpc.CallOption) (*ListByDateResponse, error) {
	out := new(ListByDateResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/ListByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) FilterNotUploaded(ctx context.Context, opts ...grpc.CallOption) (ImgSyncer_FilterNotUploadedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImgSyncer_ServiceDesc.Streams[0], "/img_syncer.ImgSyncer/FilterNotUploaded", opts...)
	if err != nil {
		return nil, err
	}
	x := &imgSyncerFilterNotUploadedClient{stream}
	return x, nil
}

type ImgSyncer_FilterNotUploadedClient interface {
	Send(*FilterNotUploadedRequest) error
	Recv() (*FilterNotUploadedResponse, error)
	grpc.ClientStream
}

type imgSyncerFilterNotUploadedClient struct {
	grpc.ClientStream
}

func (x *imgSyncerFilterNotUploadedClient) Send(m *FilterNotUploadedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imgSyncerFilterNotUploadedClient) Recv() (*FilterNotUploadedResponse, error) {
	m := new(FilterNotUploadedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imgSyncerClient) SetDriveSMB(ctx context.Context, in *SetDriveSMBRequest, opts ...grpc.CallOption) (*SetDriveSMBResponse, error) {
	out := new(SetDriveSMBResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/SetDriveSMB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) ListDriveSMBShares(ctx context.Context, in *ListDriveSMBSharesRequest, opts ...grpc.CallOption) (*ListDriveSMBSharesResponse, error) {
	out := new(ListDriveSMBSharesResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/ListDriveSMBShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) ListDriveSMBDir(ctx context.Context, in *ListDriveSMBDirRequest, opts ...grpc.CallOption) (*ListDriveSMBDirResponse, error) {
	out := new(ListDriveSMBDirResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/ListDriveSMBDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) SetDriveSMBShare(ctx context.Context, in *SetDriveSMBShareRequest, opts ...grpc.CallOption) (*SetDriveSMBShareResponse, error) {
	out := new(SetDriveSMBShareResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/SetDriveSMBShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) SetDriveWebdav(ctx context.Context, in *SetDriveWebdavRequest, opts ...grpc.CallOption) (*SetDriveWebdavResponse, error) {
	out := new(SetDriveWebdavResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/SetDriveWebdav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) ListDriveWebdavDir(ctx context.Context, in *ListDriveWebdavDirRequest, opts ...grpc.CallOption) (*ListDriveWebdavDirResponse, error) {
	out := new(ListDriveWebdavDirResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/ListDriveWebdavDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) SetDriveNFS(ctx context.Context, in *SetDriveNFSRequest, opts ...grpc.CallOption) (*SetDriveNFSResponse, error) {
	out := new(SetDriveNFSResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/SetDriveNFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) ListDriveNFSDir(ctx context.Context, in *ListDriveNFSDirRequest, opts ...grpc.CallOption) (*ListDriveNFSDirResponse, error) {
	out := new(ListDriveNFSDirResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/ListDriveNFSDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) SetDriveBaiduNetDisk(ctx context.Context, in *SetDriveBaiduNetDiskRequest, opts ...grpc.CallOption) (*SetDriveBaiduNetDiskResponse, error) {
	out := new(SetDriveBaiduNetDiskResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/SetDriveBaiduNetDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgSyncerClient) StartBaiduNetdiskLogin(ctx context.Context, in *StartBaiduNetdiskLoginRequest, opts ...grpc.CallOption) (*StartBaiduNetdiskLoginResponse, error) {
	out := new(StartBaiduNetdiskLoginResponse)
	err := c.cc.Invoke(ctx, "/img_syncer.ImgSyncer/StartBaiduNetdiskLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImgSyncerServer is the server API for ImgSyncer service.
// All implementations must embed UnimplementedImgSyncerServer
// for forward compatibility
type ImgSyncerServer interface {
	ListByDate(context.Context, *ListByDateRequest) (*ListByDateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	FilterNotUploaded(ImgSyncer_FilterNotUploadedServer) error
	// SAMBA Drive
	SetDriveSMB(context.Context, *SetDriveSMBRequest) (*SetDriveSMBResponse, error)
	ListDriveSMBShares(context.Context, *ListDriveSMBSharesRequest) (*ListDriveSMBSharesResponse, error)
	ListDriveSMBDir(context.Context, *ListDriveSMBDirRequest) (*ListDriveSMBDirResponse, error)
	SetDriveSMBShare(context.Context, *SetDriveSMBShareRequest) (*SetDriveSMBShareResponse, error)
	// Webdav Drive
	SetDriveWebdav(context.Context, *SetDriveWebdavRequest) (*SetDriveWebdavResponse, error)
	ListDriveWebdavDir(context.Context, *ListDriveWebdavDirRequest) (*ListDriveWebdavDirResponse, error)
	// NFS Drive
	SetDriveNFS(context.Context, *SetDriveNFSRequest) (*SetDriveNFSResponse, error)
	ListDriveNFSDir(context.Context, *ListDriveNFSDirRequest) (*ListDriveNFSDirResponse, error)
	SetDriveBaiduNetDisk(context.Context, *SetDriveBaiduNetDiskRequest) (*SetDriveBaiduNetDiskResponse, error)
	StartBaiduNetdiskLogin(context.Context, *StartBaiduNetdiskLoginRequest) (*StartBaiduNetdiskLoginResponse, error)
	mustEmbedUnimplementedImgSyncerServer()
}

// UnimplementedImgSyncerServer must be embedded to have forward compatible implementations.
type UnimplementedImgSyncerServer struct {
}

func (UnimplementedImgSyncerServer) ListByDate(context.Context, *ListByDateRequest) (*ListByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByDate not implemented")
}
func (UnimplementedImgSyncerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedImgSyncerServer) FilterNotUploaded(ImgSyncer_FilterNotUploadedServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterNotUploaded not implemented")
}
func (UnimplementedImgSyncerServer) SetDriveSMB(context.Context, *SetDriveSMBRequest) (*SetDriveSMBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriveSMB not implemented")
}
func (UnimplementedImgSyncerServer) ListDriveSMBShares(context.Context, *ListDriveSMBSharesRequest) (*ListDriveSMBSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriveSMBShares not implemented")
}
func (UnimplementedImgSyncerServer) ListDriveSMBDir(context.Context, *ListDriveSMBDirRequest) (*ListDriveSMBDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriveSMBDir not implemented")
}
func (UnimplementedImgSyncerServer) SetDriveSMBShare(context.Context, *SetDriveSMBShareRequest) (*SetDriveSMBShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriveSMBShare not implemented")
}
func (UnimplementedImgSyncerServer) SetDriveWebdav(context.Context, *SetDriveWebdavRequest) (*SetDriveWebdavResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriveWebdav not implemented")
}
func (UnimplementedImgSyncerServer) ListDriveWebdavDir(context.Context, *ListDriveWebdavDirRequest) (*ListDriveWebdavDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriveWebdavDir not implemented")
}
func (UnimplementedImgSyncerServer) SetDriveNFS(context.Context, *SetDriveNFSRequest) (*SetDriveNFSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriveNFS not implemented")
}
func (UnimplementedImgSyncerServer) ListDriveNFSDir(context.Context, *ListDriveNFSDirRequest) (*ListDriveNFSDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriveNFSDir not implemented")
}
func (UnimplementedImgSyncerServer) SetDriveBaiduNetDisk(context.Context, *SetDriveBaiduNetDiskRequest) (*SetDriveBaiduNetDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriveBaiduNetDisk not implemented")
}
func (UnimplementedImgSyncerServer) StartBaiduNetdiskLogin(context.Context, *StartBaiduNetdiskLoginRequest) (*StartBaiduNetdiskLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBaiduNetdiskLogin not implemented")
}
func (UnimplementedImgSyncerServer) mustEmbedUnimplementedImgSyncerServer() {}

// UnsafeImgSyncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImgSyncerServer will
// result in compilation errors.
type UnsafeImgSyncerServer interface {
	mustEmbedUnimplementedImgSyncerServer()
}

func RegisterImgSyncerServer(s grpc.ServiceRegistrar, srv ImgSyncerServer) {
	s.RegisterService(&ImgSyncer_ServiceDesc, srv)
}

func _ImgSyncer_ListByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).ListByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/ListByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).ListByDate(ctx, req.(*ListByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_FilterNotUploaded_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImgSyncerServer).FilterNotUploaded(&imgSyncerFilterNotUploadedServer{stream})
}

type ImgSyncer_FilterNotUploadedServer interface {
	Send(*FilterNotUploadedResponse) error
	Recv() (*FilterNotUploadedRequest, error)
	grpc.ServerStream
}

type imgSyncerFilterNotUploadedServer struct {
	grpc.ServerStream
}

func (x *imgSyncerFilterNotUploadedServer) Send(m *FilterNotUploadedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imgSyncerFilterNotUploadedServer) Recv() (*FilterNotUploadedRequest, error) {
	m := new(FilterNotUploadedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImgSyncer_SetDriveSMB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveSMBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).SetDriveSMB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/SetDriveSMB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).SetDriveSMB(ctx, req.(*SetDriveSMBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_ListDriveSMBShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriveSMBSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).ListDriveSMBShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/ListDriveSMBShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).ListDriveSMBShares(ctx, req.(*ListDriveSMBSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_ListDriveSMBDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriveSMBDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).ListDriveSMBDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/ListDriveSMBDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).ListDriveSMBDir(ctx, req.(*ListDriveSMBDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_SetDriveSMBShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveSMBShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).SetDriveSMBShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/SetDriveSMBShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).SetDriveSMBShare(ctx, req.(*SetDriveSMBShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_SetDriveWebdav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveWebdavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).SetDriveWebdav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/SetDriveWebdav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).SetDriveWebdav(ctx, req.(*SetDriveWebdavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_ListDriveWebdavDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriveWebdavDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).ListDriveWebdavDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/ListDriveWebdavDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).ListDriveWebdavDir(ctx, req.(*ListDriveWebdavDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_SetDriveNFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveNFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).SetDriveNFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/SetDriveNFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).SetDriveNFS(ctx, req.(*SetDriveNFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_ListDriveNFSDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriveNFSDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).ListDriveNFSDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/ListDriveNFSDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).ListDriveNFSDir(ctx, req.(*ListDriveNFSDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_SetDriveBaiduNetDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveBaiduNetDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).SetDriveBaiduNetDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/SetDriveBaiduNetDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).SetDriveBaiduNetDisk(ctx, req.(*SetDriveBaiduNetDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgSyncer_StartBaiduNetdiskLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBaiduNetdiskLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncerServer).StartBaiduNetdiskLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/img_syncer.ImgSyncer/StartBaiduNetdiskLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncerServer).StartBaiduNetdiskLogin(ctx, req.(*StartBaiduNetdiskLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImgSyncer_ServiceDesc is the grpc.ServiceDesc for ImgSyncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImgSyncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "img_syncer.ImgSyncer",
	HandlerType: (*ImgSyncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByDate",
			Handler:    _ImgSyncer_ListByDate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImgSyncer_Delete_Handler,
		},
		{
			MethodName: "SetDriveSMB",
			Handler:    _ImgSyncer_SetDriveSMB_Handler,
		},
		{
			MethodName: "ListDriveSMBShares",
			Handler:    _ImgSyncer_ListDriveSMBShares_Handler,
		},
		{
			MethodName: "ListDriveSMBDir",
			Handler:    _ImgSyncer_ListDriveSMBDir_Handler,
		},
		{
			MethodName: "SetDriveSMBShare",
			Handler:    _ImgSyncer_SetDriveSMBShare_Handler,
		},
		{
			MethodName: "SetDriveWebdav",
			Handler:    _ImgSyncer_SetDriveWebdav_Handler,
		},
		{
			MethodName: "ListDriveWebdavDir",
			Handler:    _ImgSyncer_ListDriveWebdavDir_Handler,
		},
		{
			MethodName: "SetDriveNFS",
			Handler:    _ImgSyncer_SetDriveNFS_Handler,
		},
		{
			MethodName: "ListDriveNFSDir",
			Handler:    _ImgSyncer_ListDriveNFSDir_Handler,
		},
		{
			MethodName: "SetDriveBaiduNetDisk",
			Handler:    _ImgSyncer_SetDriveBaiduNetDisk_Handler,
		},
		{
			MethodName: "StartBaiduNetdiskLogin",
			Handler:    _ImgSyncer_StartBaiduNetdiskLogin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FilterNotUploaded",
			Handler:       _ImgSyncer_FilterNotUploaded_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/img_syncer.proto",
}
